@using HackTheCrisis.Models;
@using System.Globalization;
@inject HackTheCrisis.Helpers.SearchHelper searchHelper




@if (searchResult != null && searchResult.Any())
{
    <div class="row">
        <div class="col-lg-12">
            <table class="table" id="table">
                <thead>
                    <tr>
                        <th>Who?</th>
                        <th>Supply/Needs</th>
                        <th>How much?</th>
                        <th>Where?</th>
                        <th>When?</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in searchResult)
                    {
                        <tr>
                            <td><strong><a href="/">@item.Organization</a></strong></td>
                            <td><strong>@item.Item</strong></td>
                            <td>@item.Quantity @item.QuantityUnit</td>
                            <td>@item.Location</td>
                            <td>
                                <time datetime="@item.SubmittedDate.ToString("yyyy-MM-dd", CultureInfo.CreateSpecificCulture("sv-SE"))">
                                    @item.SubmittedDate.ToString("yyyy-MM-dd", CultureInfo.CreateSpecificCulture("sv-SE"))
                                </time>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <hr>
        </div>
    </div>

    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async ()=>await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>Next</button>

    </div>

}

@code {
    IEnumerable<SearchResultViewModel> searchResult;

    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; /*FilterRecords();*/ }
    }


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    #endregion

    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 2;
        curPage = 1;
        searchResult = await searchHelper.ListAllNeedsAndOffers((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        totalRecords = await searchHelper.NeedsAndOffersCount();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }

    public async Task refreshRecords(int currentPage)
    {
        searchResult = await searchHelper.ListAllNeedsAndOffers((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
}