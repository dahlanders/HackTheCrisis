@using HackTheCrisis.Models.ViewModels;
@using System.Globalization;
@using HackTheCrisis.Helpers;
@using Microsoft.AspNetCore.Mvc.Rendering;

@if (searchResult != null && searchResult.Any())
{
    @* Search term *@
    <div class="row search-list">
        <div class="row col-md-3 pull-right">
            <input type="text" id="txtSearch" placeholder="What do you need?" class="form-control" @bind="SearchTerm" @bind:event="oninput" />
        </div>
        @* Filter *@
        <select id="filterSelect" class="form-control"
                @onchange="Filter">
            <option selected="selected" value="-1">Please select</option>
            @foreach (var opt in filterOptions)
            {
                <option value=@opt.Value>@opt.Text</option>
            }
        </select>
        @*<select onchange=@DoStuff>
                @foreach (var template in templates)
                {
                    <option value=@template>@template</option>
                }
            </select>*@


        <div class="col-lg-12">
            <table class="table" id="table">
                <thead>
                    <tr>
                        <th>Who?</th>
                        <th>Supply/Needs</th>
                        <th>How much?</th>
                        <th>Where?</th>
                        <th>When?</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in searchResult)
                    {
                        <tr>
                            <td><strong><a href="/">@item.Organization</a></strong></td>
                            <td><strong>@item.Item</strong></td>
                            <td>@item.Quantity @item.QuantityUnit</td>
                            <td>@item.Location</td>
                            <td>
                                <time datetime="@item.SubmittedDate.ToString("yyyy-MM-dd", CultureInfo.CreateSpecificCulture("sv-SE"))">
                                    @item.SubmittedDate.ToString("yyyy-MM-dd", CultureInfo.CreateSpecificCulture("sv-SE"))
                                </time>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <hr>
        </div>
        @* Pagination *@
        <div class="pagination">
            <button class="btn btn-custom" @onclick=@(()=> NavigateToPage("previous"))>Prev</button>

            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(()=> refreshRecords(currentPage))>
                    @currentPage
                </button>
            }

            <button class="btn btn-custom" @onclick=@(()=>  NavigateToPage("next"))>Next</button>

        </div>
    </div>

}
<button class="btn btn-custom" @onclick="Close">X</button>

@code {
    [Parameter]
    public SearchListComponentModel ComponentModel { get; set; }

    IEnumerable<SearchResultViewModel> searchResult;

    SearchHelper searchHelper;

    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }

    private SelectList filterOptions;

    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";
    int filterBy = -1;

    #endregion

    protected override void OnInitialized()
    {
        searchHelper = new SearchHelper(ComponentModel.SearchResult);
        //var needEnums = Enum.GetValues(typeof(NeedType)).Cast<NeedType>();
        //var offerEnums = Enum.GetValues(typeof(OfferType)).Cast<OfferType>();

        //var selectListItems = new List<SelectListItem>();
        //foreach (var item in needEnums)
        //{
        //    selectListItems.Add(new SelectListItem { Selected = false, Text = item.ToString(), Value = ((int)item).ToString() });
        //}
        //foreach (var item in offerEnums)
        //{
        //    selectListItems.Add(new SelectListItem { Selected = false, Text = item.ToString(), Value = ((int)item).ToString() });
        //}

        //filterOptions = new SelectList(selectListItems, "Value", "Text");
        filterOptions = ComponentModel.Filter;

        SetInitialValues();
    }

    private void Close()
    {
        var test = false;
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private void SetInitialValues()
    {

        //display total page buttons
        pagerSize = 3;
        pageSize = 2;
        curPage = 1;

        var search = searchHelper.ListAllNeedsAndOffers((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm, filterBy);
        searchResult = search.Items;
        totalRecords = search.ReturnedHits;
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }

    private void Filter(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();
        if (int.TryParse(selectedValue, out int enumId))
        {
            filterBy = enumId;
            FilterRecords();
        }
    }

    private IEnumerable<SearchResultViewModel> SortRecords(string columnName, string dir)
    {
        var search = searchHelper.ListAllNeedsAndOffers((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
        return search.Items;
    }

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            searchResult = SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                searchResult = SortRecords(columnName, "DESC");
            }
            else
            {
                searchResult = SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void refreshRecords(int currentPage)
    {
        var search = searchHelper.ListAllNeedsAndOffers((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        searchResult = search.Items;
        curPage = currentPage;
        this.StateHasChanged();
    }

    private void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    private void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        refreshRecords(curPage);
    }

    private void FilterRecords()
    {
        endPage = 0;
        SetInitialValues();
    }
}
